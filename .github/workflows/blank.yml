name: Performance and Security Scanning

on: [push, pull_request]

env:
  TARGET_URL: https://ginandjuice.shop/
  JMETER_VERSION: 5.6.3
  ZAP_VERSION: 2.12.0
  AWS_DEFAULT_REGION: us-east-1
  AWS_REGION: us-east-1
  SEVERITY_THRESHOLD: Medium
  REPORT_FORMAT: json,html,xml

jobs:
  performance-security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'
    
    - name: Install JMeter
      run: |
        wget https://dlcdn.apache.org/jmeter/binaries/apache-jmeter-${{ env.JMETER_VERSION }}.tgz
        tar -xzvf apache-jmeter-${{ env.JMETER_VERSION }}.tgz
        echo "$PWD/apache-jmeter-${{ env.JMETER_VERSION }}/bin" >> $GITHUB_PATH
    
    - name: Create JMeter Test Plan
      run: |
        cat > performance-test.jmx << EOL
        <?xml version="1.0" encoding="UTF-8"?>
        <jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
          <hashTree>
            <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Pruebas de Rendimiento Web Integrales" enabled="true">
              <stringProp name="TestPlan.comments">Pruebas de carga, estrés y rendimiento para sitio web</stringProp>
              <boolProp name="TestPlan.functional_mode">false</boolProp>
              <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
              <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
              <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables Definidas por Usuario" enabled="true">
                <collectionProp name="Arguments.elements">
                  <elementProp name="DOMAIN" elementType="Argument">
                    <stringProp name="Argument.name">DOMAIN</stringProp>
                    <stringProp name="Argument.value">ginandjuice.shop</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="PROTOCOL" elementType="Argument">
                    <stringProp name="Argument.name">PROTOCOL</stringProp>
                    <stringProp name="Argument.value">https</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="TestPlan.user_define_classpath"></stringProp>
            </TestPlan>
            <hashTree>
              <!-- Configuración de Credenciales -->
              <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Credenciales de Prueba" enabled="true">
                <collectionProp name="Arguments.elements">
                  <elementProp name="USERNAME" elementType="Argument">
                    <stringProp name="Argument.name">USERNAME</stringProp>
                    <stringProp name="Argument.value">test@example.com</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="PASSWORD" elementType="Argument">
                    <stringProp name="Argument.name">PASSWORD</stringProp>
                    <stringProp name="Argument.value">testpassword123</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </Arguments>
              <hashTree/>
        
              <!-- Prueba de Carga Normal -->
              <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Prueba de Carga Normal" enabled="true">
                <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
                <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Controlador de Bucle" enabled="true">
                  <boolProp name="LoopController.continue_forever">false</boolProp>
                  <intProp name="LoopController.loops">-1</intProp>
                </elementProp>
                <stringProp name="ThreadGroup.num_threads">50</stringProp>
                <stringProp name="ThreadGroup.ramp_time">10</stringProp>
                <boolProp name="ThreadGroup.scheduler">true</boolProp>
                <stringProp name="ThreadGroup.duration">300</stringProp>
                <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
              </ThreadGroup>
              <hashTree>
                <!-- Escenarios de Prueba -->
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Página Principal" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Variables de Usuario" enabled="true">
                    <collectionProp name="Arguments.elements"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${DOMAIN}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                  <stringProp name="HTTPSampler.path">/</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validar Respuesta 200 OK" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message">La página principal no carga correctamente</stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
        
                <!-- Simulación de Login -->
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Inicio de Sesión" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Variables de Usuario" enabled="true">
                    <collectionProp name="Arguments.elements">
                      <elementProp name="email" elementType="HTTPArgument">
                        <stringProp name="Argument.name">email</stringProp>
                        <stringProp name="Argument.value">${USERNAME}</stringProp>
                        <boolProp name="Argument.metadata">=</boolProp>
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      </elementProp>
                      <elementProp name="password" elementType="HTTPArgument">
                        <stringProp name="Argument.name">password</stringProp>
                        <stringProp name="Argument.value">${PASSWORD}</stringProp>
                        <boolProp name="Argument.metadata">=</boolProp>
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${DOMAIN}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                  <stringProp name="HTTPSampler.path">/login</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validar Inicio de Sesión" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message">Fallo en el inicio de sesión</stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
        
              <!-- Prueba de Estrés -->
              <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Prueba de Estrés" enabled="true">
                <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
                <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Controlador de Bucle" enabled="true">
                  <boolProp name="LoopController.continue_forever">false</boolProp>
                  <intProp name="LoopController.loops">-1</intProp>
                </elementProp>
                <stringProp name="ThreadGroup.num_threads">200</stringProp>
                <stringProp name="ThreadGroup.ramp_time">5</stringProp>
                <boolProp name="ThreadGroup.scheduler">true</boolProp>
                <stringProp name="ThreadGroup.duration">180</stringProp>
                <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
              </ThreadGroup>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Búsqueda de Productos" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Variables de Usuario" enabled="true">
                    <collectionProp name="Arguments.elements">
                      <elementProp name="q" elementType="HTTPArgument">
                        <stringProp name="Argument.name">q</stringProp>
                        <stringProp name="Argument.value">juice</stringProp>
                        <boolProp name="Argument.metadata">=</boolProp>
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${DOMAIN}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                  <stringProp name="HTTPSampler.path">/search</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
        
              <!-- Configuraciones Globales de Reporte -->
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Árbol de Resultados" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>true</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <sentBytes>true</sentBytes>
                    <url>true</url>
                    <threadCounts>true</threadCounts>
                    <idleTime>true</idleTime>
                    <connectTime>true</connectTime>
                  </value>
                </objProp>
                <stringProp name="filename">performance_results.jtl</stringProp>
              </ResultCollector>
              <hashTree/>
        
              <!-- Agregadores de Resultados -->
              <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Estadísticas de Resultados" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>true</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <sentBytes>true</sentBytes>
                    <url>true</url>
                    <threadCounts>true</threadCounts>
                    <idleTime>true</idleTime>
                    <connectTime>true</connectTime>
                  </value>
                </objProp>
                <stringProp name="filename">performance_statistics.jtl</stringProp>
              </ResultCollector>
              <hashTree/>
            </hashTree>
          </hashTree>
        </jmeterTestPlan>
        EOL
    
    - name: Performance and Report Generation
      run: |
        mkdir -p jmeter-report
        
        jmeter -n -t performance-test.jmx -l performance-results.jtl -f -o jmeter-report
  
    - name: Install and Configure OWASP ZAP with Enhanced Scanning Script
      run: |
        VERSIONS=("2.14.0" "2.13.0" "2.12.0")
        
        for VERSION in "${VERSIONS[@]}"; do
          wget -q "https://github.com/zaproxy/zaproxy/releases/download/v${VERSION}/ZAP_${VERSION}_Linux.tar.gz" -O zap.tar.gz
          
          if [ $? -eq 0 ]; then
            echo "Downloading ZAP version ${VERSION}"
            tar -xzf zap.tar.gz
            
            ZAP_DIR=$(find . -type d -name "ZAP_*" | head -n 1)
            
            if [ -n "$ZAP_DIR" ]; then
              echo "ZAP installed from version ${VERSION}"
              chmod +x "$ZAP_DIR/zap.sh"
              echo "ZAP_FULL_PATH=$ZAP_DIR/zap.sh" >> $GITHUB_ENV
              break
            fi
          fi
        done
              
              if [ -z "$ZAP_DIR" ]; then
                echo "No se pudo instalar OWASP ZAP"
                exit 1
              fi
          
    - name: Enhanced Security Scanning Script
      env:
        TARGET_URL: ${{ env.TARGET_URL }}
      run: |
        #!/bin/bash
        
        log_error() { 
          echo "[ERROR] $1" >&2 
          exit 1 
        }
        
        log_info() { 
          echo "[INFO] $1" 
        }
        
        validate_prerequisites() {
          # Verify URL
          if [[ -z "$TARGET_URL" ]]; then
            log_error "Target URL not specified"
          fi
          
          if [[ ! -x "$ZAP_FULL_PATH" ]]; then
            log_error "ZAP is not installed or not executable"
          fi
          
          mkdir -p "${{ github.workspace }}/zap-reports"
        }
        
        perform_security_scan() {
          local base_report="${{ github.workspace }}/zap-reports/zap-scan-$(date +%Y%m%d_%H%M%S)"
          
          log_info "Starting security scan on: $TARGET_URL"
          
          "$ZAP_FULL_PATH" -cmd \
            -quickurl "$TARGET_URL" \
            -quickout "${base_report}.json" \
            -quickprogress \
            -silent \
            -config "spider.maxDepth=5" \
            -config "spider.timeout=10" \
            -config "scanner.attackStrength=MEDIUM" \
            -config "scanner.alertThreshold=$SEVERITY_THRESHOLD" \
            -addoninstall "pscanrules" \
            -addonupdate \
            -spiderurl "$TARGET_URL" \
            -ajaxSpider \
            -recursiveSpider \
            -scanPolicy "Default Policy" \
            -autoExit \
            -reportType "$REPORT_FORMAT" \
            -reportfile "${base_report}"
          
          local scan_exit_code=$?
          if [[ $scan_exit_code -ne 0 ]]; then
            log_error "ZAP scan failed with exit code $scan_exit_code"
          fi
        }
        
        analyze_scan_results() {
          local report_json=$(find "${{ github.workspace }}/zap-reports" -name "*.json" -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d" ")
          
          if [[ -z "$report_json" ]]; then
            log_info "No ZAP scan report found"
            return 0
          fi
          
          log_info "Analyzing report: $report_json"
          
          local vulnerability_count=0
          local critical_vulnerability_count=0
          
          if [[ ! -f "$report_json" || ! -r "$report_json" ]]; then
            log_error "Cannot read report file: $report_json"
            return 1
          fi
          
          while IFS= read -r line; do
            # Simple string matching for risk levels
            if [[ "$line" =~ "riskcode\":[3-4] ]]; then
              ((critical_vulnerability_count++))
            elif [[ "$line" =~ "riskcode\":[2-4] ]]; then
              ((vulnerability_count++))
          
              # Extract and log vulnerability names if possible
              if [[ "$line" =~ \"name\":\"([^\"]+)\" ]]; then
                log_info "Detected Vulnerability: ${BASH_REMATCH[1]}"
              fi
            fi
          done < "$report_json"
          
          if [[ $critical_vulnerability_count -gt 0 ]]; then
            log_error "Critical vulnerabilities detected: $critical_vulnerability_count"
          elif [[ $vulnerability_count -gt 0 ]]; then
            log_info "Detected $vulnerability_count non-critical vulnerabilities"
          else
            log_info "No significant vulnerabilities detected"
          fi
        }
        
        main() {
          validate_prerequisites
          perform_security_scan
          analyze_scan_results
        }
        
        main
      
    - name: Upload Reports to S3
      run: |
        upload_file_to_s3() {
          local file_path="$1"
          local s3_path="$2"
          
          if [ -f "$file_path" ]; then
            echo "Uploading file: $file_path"
            aws s3 cp "$file_path" "$s3_path"
          else
            echo "File does not exist: $file_path"
          fi
        }
        
        upload_file_to_s3 "performance-results.jtl" "s3://bedrockawss3test/informes/jmeter-results-${{ github.sha }}.jtl"
        
        if [ -d "jmeter-report" ] && [ "$(ls -A jmeter-report)" ]; then
          aws s3 sync jmeter-report s3://bedrockawss3test/informes/jmeter-report-${{ github.sha }}/
        fi
        
        for report in "${{ github.workspace }}/zap-reports"/*; do
          upload_file_to_s3 "$report" "s3://bedrockawss3test/informes/zap-security-report-${{ github.sha }}$(basename "$report")"
        done
